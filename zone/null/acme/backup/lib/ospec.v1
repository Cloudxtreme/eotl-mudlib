/*
    NAME
        ospec.c - Object SPECification parsing system
    DESCRIPTION

     Opie interface:
      object_spec_variable_set() - sets a variable for use in specs
      object_spec_help()         - returns name of help file
      evaluate_object_spec()     - parses spec and return list of objects
      parse_ospec()              - Same thing, but not Opie conformant

    NOTES
        The only side effects are in the VarSpace code.
        Other than that, this object is stateless.
    LAST MODIFIED
        Zamboni 960325

*/

#include <acme.h>

private inherit AcmeError;
private inherit AcmeArray;
private inherit AcmeForceLoad;
private inherit AcmeRoom;
private inherit AcmeShadow;
private inherit AcmeUser;
private inherit AcmeVarSpace;
private inherit AcmeArgs;
private inherit AcmeFindTarget;

#include AcmeOSpecInc
#include AcmeErrorInc
#include AcmeArrayInc
#include AcmeForceLoadInc
#include AcmeRoomInc
#include AcmeShadowInc
#include AcmeUserInc
#include AcmeVarSpaceInc
#include AcmeArgsInc
#include AcmeFindTargetInc

#define SafeBind(c)    ( AcmeClosureServer->secure_closure(c) )
#define SafeBindSym(s) ( AcmeClosureServer->secure_fsym(s) )

#define HELP_FILE AcmeDocDir "ospec.help"

string spec_delimiter, subspec_delimiter, internal_delimiter;
string default_priorities;

mapping cl;  // For storing lots of often-used closures


#define DATASPACE ( PRNAME )

// If anyone wants to use something else, I'll make this a global
// variable like all the delimiters so you can customize it through
// inheritance.  Until then, I'll just use this.
#define C_OPEN "("
#define C_CLOSE ")"


/*----------------------------- make_closures ---------------------------*/
/*
    Description:
      Binds some closures for convenient use in ospec transforms.
    Parameters:
      None.
    Returns:
      Nothing.
    Notes:
      None.
*/
private void
make_closures()
{
  cl = ([ ]);
  
  cl["shad_1"] = lambda( ({ 'o, 'i }), 
                        ({ #'checked_item,
			   ({ #'all_shadows, 'o }), 'i }));
  cl["shad_1_rev"] = lambda( ({ 'o, 'i }), 
                        ({ #'checked_item_reverse,
                           ({ #'all_shadows, 'o }), 'i }));
  cl["invnum"] = lambda( ({ 'o, 'i }), 
                         ({ #'checked_item,
		           ({ #'all_inventory, 'o }), 'i }));

  cl["progname"] = lambda( ({ 'o, 'pn }),
                           ({ #'== , ({ #'program_name, 'o }), 'pn }));

  cl["present"] = lambda( ({ 'o, 'arg }), 
                          ({ #'present, 'arg, 'o }) );

}



/*----------------------------- create ---------------------------*/
/*
    Description:
      Initialize this object.
    Parameters:
      None.
    Returns:
      Nothing.
    Notes:
      Called at creation time.
*/
void
create()
{
  seteuid( getuid() );

  // These delimiters can be more than one character.
  spec_delimiter     = ",";
  subspec_delimiter  = ":";
  internal_delimiter = ".";
  default_priorities = (FT_InvItem    FT_EnvItem FT_FindObject 
                        FT_FindPlayer FT_File    FT_FindLiving);
  make_closures();
}

/*----------------------------- value_closure ---------------------------*/
/*
    Description:
      Creates arrays for including into filter closures.
    Parameters:
      arg - A value specifier
    Returns:
      An array, suitable for binding into a closure.
    Notes:
      See make_filter_closure().
*/
private mixed
value_closure( string arg )
{
  string tmp;
  closure tmpcl;
  int itmp, max;

  if( arg == "THISO" )
    return 'thiso;

  if( arg == "LIST" )
    return 'list;

  if( sscanf( arg, "->%s()", tmp ) 
      || sscanf( arg, "->%s", tmp ) 
      || sscanf( arg, "%s()", tmp ) )
    return ({ #'call_other, 'thiso, tmp });

  if( sscanf( arg, "#'%s", tmp ) )
  {
    tmpcl = SafeBindSym( tmp );
    return closurep( tmpcl ) ? ({ #'funcall, tmpcl, 'thiso }) : 0;
  }

  max = strlen( arg ) - 1;

  if( ( arg[0] == '\"' ) && ( arg[max] == '\"' ) )
    return arg[1..max-1];

  // We're losing our priorities list here.  Think we'll get away with it?
  if( ( arg[0] == '\(' ) && ( arg[max] == '\)' ) )
    return ({ #'call_other, THISO, "parse_ospec", arg[1..max-1], 0 });

  if( arg[0] == '0' )
    return to_int( arg );
  
  if ( itmp = to_int( arg ) )
    return itmp;

  return arg;
}

/* This is public so the closures can use it. */
status
equal( mixed v1, mixed v2 )
{
  if( pointerp(v1) )
    return array_equal( v1, v2 );
  return v1 == v2;
}

/*----------------------------- make_filter_closure ---------------------------*/
/*
    Description:
      Creates a closure from some specified parameters
    Parameters:
      args - A list of subterms from the ospec.
    Returns:
      A closure that takes two arguments:
        thiso - One object to consider for filtering
        list  - The list of all objects being considered
      The closure will evaluate to 1 or 0.
    Notes:
      The closure may produce side effects by calling arbitrary
      functions in the objects passed to it, arbitrary efuns with the
      object as an argument, and by calling parse_ospec().  The
      closure is bound in a safe environment.
*/
private closure
make_filter_closure( string *args )
{
  closure cl;
  mixed m1, m2, m3;

  switch( sizeof( args ) )
  {
    case 1:
      m1 = value_closure( args[0] );
      break;
    case 2:
      m1 = value_closure( args[1] );
      break;
    case 4:
      m3 = value_closure( args[3] );
    default:
      m1 = value_closure( args[1] );
      m2 = value_closure( args[2] );
  }
  
  if( sizeof( args ) == 1)
    cl = unbound_lambda(({ 'thiso, 'list }), m1);
  else
  {
    switch( args[0] )
    {
      case "!":
        cl = unbound_lambda(({ 'thiso, 'list }), ({ #'!, m1 }) );
        break;
      case ">":
      case "<":
      case ">=":
      case "<=":
        cl = unbound_lambda(({ 'thiso, 'list }), 
                            ({ symbol_function( args[0] ), m1, m2 }) );
        break;
      case "?":
      case "?:":
        cl = unbound_lambda(({ 'thiso, 'list }), ({ #'?, m1, m2, m3 }) );
        break;
      case "==":
        cl = unbound_lambda(({ 'thiso, 'list }), 
                            ({ #'call_other, THISO, "equal", m1, m2}) );
        break;
      case "!=":
        cl = unbound_lambda(({ 'thiso, 'list }), 
                            ({ #'!,({ #'call_other, THISO, "equal",m1,m2}) }));
        break;
      default:
        return 0;
    }
  }
  return closurep( cl ) ? SafeBind( cl ) : 0;
}

/*----------------------------- unnest ---------------------------*/
/*
    Description:
      Strips surrounding parentheses (or something) from a string.
    Parameters:
      ospec - An ospec that may be surrounded by C_OPEN and C_CLOSE chars.
    Returns:
      ospec, not surrounded by C_OPEN and C_CLOSE chars.
    Notes:
      C_OPEN and C_CLOSE are probably parentheses, or something similar.
*/
private string
unnest( string ospec )
{
  int len;
  // Not the fastest way to do this, but it's much simpler than a custom job.
  while( ( searcha(C_OPEN, ospec[0]) != -1 ) 
         && ( searcha(C_CLOSE, ospec[len= strlen(ospec)-1]) != -1 ) 
         && ( find_close_char( ospec, 0, 0, C_OPEN, C_CLOSE ) == len ))
    ospec = ospec[1..<2];
  return ospec;
}


/*----------------------------- parse_single ---------------------------*/
/*
    Description:
      Third level parsing routine.  Handles things like "m" and "*zamboni"
    Parameters:
      arg   - A term in the ospec
      prev  - An array of objects to use as context
      first - True if this is the first term
    Returns:
      An array of objects referred to by arg in the context of prev
      and first.
    Notes:
      Can have side effects by calling parse_ospec() recursively, and
      through efun and lfun calls specified in arg.
      This is usually called from parse_subspec().
*/
private object *
parse_single(string arg, object *prev, status first, string priorities)
{
  string *args;
  string tmp;
  int numargs, itmp, itmp2;
  mixed mtmp;
  object otmp;
  object *Otmp;
  closure tmpcl;

  if(!stringp(arg) || arg == "")
    return prev;

  // I split it up like this so I can do faster checks on the parameters.
  args = explode_nested(arg, internal_delimiter);
  numargs = sizeof(args);

  /****************************
  *****************************
  ** CONTEXT FREE ASSIGNMENTS
  ****************************/
  
  if(numargs == 1)
  {
    if( (tmp = unnest( arg )) != arg )
      return parse_ospec( tmp, 0, priorities );
    
    switch(arg)
    {
      case "me":
       return ({ THISP });
      case "here":
	return ({ ENV(THISP) });
      case "u":
	return first ? users()   : filter_array( prev, #'interactive );
      case "m":
	return first ? mortals() : mortals( prev );
      case "w":
	return first ? wizards() : wizards( prev );

      case "it":
        return query( "it", DATASPACE );

      case "him":
        return query( "him", DATASPACE );

      case "her":
        return query( "her", DATASPACE );

      case "them":
        return query( "them", DATASPACE );

    }
  
    if (sscanf(arg, "*%s", tmp))
      return ({ find_player(tmp) });

    if (sscanf(arg, "@%s", tmp))
      return ({ find_living(tmp) });


    if (sscanf(arg, "$%s", tmp))
      return query(tmp, DATASPACE);
  }

  /*******************
  ********************
  ** TRANSFORMATIONS
  *******************/

  if(!prev)
    prev = ({ });


  if(numargs == 1)
  {
    switch(arg)
    {
      case "i":
	return flatten_array1(map_array(prev, #'all_inventory));
      case "I":
        return flatten_array1(map_array(prev, #'deep_inventory));
      case "e":
	return map_array(prev, #'environment);
      case "s":
        return flatten_array1(map_array(prev, #'all_shadows));
    }
    /* Symbols */

    if (sscanf(arg, "#'%s", tmp))
      return flatten_array1( map_array( prev, SafeBindSym(tmp) ));    

    /* Inventory items */

    if (sscanf(arg, "i%d", itmp)
	|| sscanf(arg, "#%d", itmp))
      return flatten_array1(map_array(prev, cl["invnum"], itmp));

    /* Shadows */

    if (sscanf(arg, "s-%d", itmp))
      return flatten_array1(map_array(prev, cl["shad_1_rev"], itmp));

    if (sscanf(arg, "s%d", itmp))
      return flatten_array1(map_array(prev, cl["shad_1"], itmp));

    /* Map Objects */

    if (sscanf(arg, "->%s()", tmp)
	|| sscanf(arg, "->%s", tmp))
    {
      return flatten_array1(map_objects(prev, tmp));
    }

  } else // (numargs > 1)
  {
  
    /* Room exits */

    if (args[0] == "x")
    {
      if(first)
        prev = ({ ENV(THISP) });
      if(args[1] == "!")
	return force_load_array(flatten_array1(map_array(prev, #'all_exits)));
      else
	return force_load_array(map_array(prev, #'get_exit, args[1]));
    }
  }

  /* Addition */
  if (sscanf(arg, "+%s", tmp))
    return prev + parse_ospec(tmp, 0, priorities);

  /************************
  **   REDUCTIONS
  ************************/

  if(numargs == 1)
  {
    if (arg == "!=")
      return unique_array(prev);

    if (sscanf(arg, "[%d]", itmp))
      return ({ checked_item(prev, itmp) });
  } else 
  {
    if (args[0] == "f")
    {
      tmpcl = make_filter_closure(args[1..]);
      return closurep(tmpcl) ? filter_array(prev, tmpcl, prev) : ({ });
    }
    

    if (args[0] == "id")
      return filter_objects(prev, "id", args[1]);

    if (args[0] == "prop")
      return filter_objects(prev, "test_prop", args[1]);

    if (args[0] == "prog")
      return filter_array(prev, cl["progname"], args[1]);
    if (args[0] == "ip")
    {
      if(first)
        prev = users();
      return filter_by_hostname(prev, arg[3..]);
    }
  }

  if (sscanf(arg, "!=%s", tmp))
    return exclude_array(prev, parse_ospec(tmp, 0, priorities));

  if (sscanf(arg, "==%s", tmp))
    return intersect_array(prev, parse_ospec(tmp, 0, priorities));

  if (arg[0] == '\[')
  {
    if (sscanf(arg, "[%d..<%d]", itmp, itmp2) == 2)
      return prev[itmp..<itmp2];
    if (sscanf(arg, "[%d..%d]", itmp, itmp2) == 2)
      return prev[itmp..itmp2];
    if (sscanf(arg, "[%d..]", itmp))
      return prev[itmp..<1];
  }

  /***********************
  **     OrdLevel ranges 
  ***********************/


  if(numargs == 1)
  {
    if (sscanf(arg, ">%s", tmp))
      return level_range(prev, to_ordlevel(tmp)+1, 999);

    if (sscanf(arg, "<%s", tmp))
      return level_range(prev, 0, to_ordlevel(tmp)-1);

  } else
  {
    if((args[0] == "u") || (args[0] == "level"))
    {
      if( first )
        prev = users();

      itmp = to_ordlevel(args[1]);
      if(numargs > 2)
	itmp2 = to_ordlevel(args[2]);
      else
	itmp2 = itmp;
      return level_range(prev, itmp, itmp2);
    }
  }

  // Do we have strong reason to believe it's a file?
  if( ( searcha( arg, '/' ) != -1 )
      || ( arg[<2..] == ".c" ) )
    return resolve_filespec( arg, 1 );  

  if( !first )
    return map_array(prev, cl["present"], arg);

  /* The DWIM last resort */
  return find_targets( arg, priorities, 1, prev );
}

/*----------------------------- parse_subspec ---------------------------*/
/*
    Description:
      Second level parsing routine.
    Parameters:
      ospec - A subspec string.
      prev  - An array of objects to use as context, or 0.
    Returns:
      An array of objects referred to by ospec in the context of prev.
    Notes:
      prev should normally be 0.
      This is usually called from parse_ospec().
      Can have side effects by calling parse_ospec() recursively.
*/
private object *
parse_subspec(string ospec, object *prev, string priorities)
{
  string *args;
  string tmp;
  int i, size, first;
  object *list;

  args = stringp(ospec)
    ? explode_nested( ospec, subspec_delimiter, 0, C_OPEN, C_CLOSE )
    : args = ({ });
  
  size=sizeof(args);

  if( ( size == 1 ) && ( (tmp = unnest( ospec )) != ospec ) )
    return parse_ospec( tmp, 0, priorities );

  if(!prev)
  {
    first = 1;
    prev = ({ THISP });
  }

  for(i=0; i < size; i++)
  {
    if(args[i] == "")
      continue;

    prev = filter_array(prev, #'objectp);
    prev = parse_single(args[i], prev, first, priorities);
    first = 0;
  }
  return prev;
}

/*----------------------------- parse_ospec ---------------------------*/
/*
    Description:
      Top level parsing routine.
    Parameters:
      ospec - An object specification string.
      prev  - An array of objects to use as context, or 0.
    Returns:
      An array of objects referred to by ospec in the context of prev.
    Notes:
      prev should normally be 0.
      Will set one of the variables "him", "her", "it", or "them".
      Will set the variable "$".
*/
object *
parse_ospec(string ospec, object *prev, string priorities)
{
  object *list;
  object *subval;
  int size, i;
  string *sublists;
  string dataspace;

  if(!stringp(ospec) || !strlen(ospec))
    return 0;

  if( !stringp( priorities ) )
    priorities = default_priorities;

  ospec = unnest( ospec );

  sublists = explode_nested( ospec, spec_delimiter, 0, C_OPEN, C_CLOSE );
  size = sizeof(sublists);
  
  list = ({ });

  for(i=0; i < size; i++)
  {
    subval = parse_subspec(sublists[i], prev, priorities);
    if(pointerp(subval))
      list += subval;
  }
  
  list = filter_array(list, #'objectp);
  dataspace = DATASPACE;
  set("$", list, dataspace);
  if( sizeof( list ) > 0)
  {
    if( sizeof( list ) > 1)
      set( "them", list, dataspace );
    else
    {
      if( living( list[0] ) )
        switch( list[0]->query_gender() )
        {
          case "male":
            set( "him", list, dataspace ); break;
          case "female":
            set( "her", list, dataspace ); break;
          default:
            set( "it", list, dataspace ); 
        }
      else
        set( "it", list, dataspace );
    }
  }
  
  return list;
}


/*------------------------- evaluate_object_spec ---------------------------*/
/*
    Description:
      Opie conformant access point.
    Parameters:
      ospec  - An object specification string.
      tool   - The tool that is passing us this spec.
    Returns:
      An array of objects referred to by ospec.
    Notes:
      None.
*/
object *
evaluate_object_spec(string ospec, object tool, string priorities)
{
  return parse_ospec(ospec, 0, priorities);
}

/*----------------------------- object_spec_help ---------------------------*/
/*
    Description:
      Tells where help can be found.
    Parameters:
      None.
    Returns:
      The name of the file that contains help for this OSpec system.
    Notes:
      None.
*/
string
object_spec_help()
{
  return AcmeEtcDir "ospec.help";
}

/*------------------------- object_spec_variable_set -----------------------*/
/*
    Description:
      Bridge between Opie and VarSpace
    Parameters:
      key   - 
      value - 
    Returns:
      Nothing.
    Notes:
      None.
*/
void
object_spec_variable_set(mixed key, mixed value)
{
  if( pointerp( value ) )
    value = filter_array( value, #'objectp );
  
  set(key, value, DATASPACE);
}

